name: GitHub Pages Publish

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4.2.2

      - name: Set GitHub Token
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          echo "GH_TOKEN=${{ github.token }}" >> $GITHUB_ENV

      - name: Extract and convert Mermaid diagrams
        run: |
          mkdir -p Doc/images/mermaid

          find Doc -name "*.adoc" -type f | while read file; do
            echo "Processing $file: $(basename "$file")"

            grep -n "\[mermaid\]" "$file" | while read -r mermaid_line; do
              line_num=$(echo "$mermaid_line" | cut -d: -f1)

              delimiter_line=$((line_num + 1))

              if ! sed -n "${delimiter_line}p" "$file" | grep -q "^\.\.\.\."; then
                echo "Warning: Expected '....' delimiter not found after [mermaid] at line $line_num in $file"
                continue
              fi

              end_line_num=$(tail -n +$((delimiter_line + 1)) "$file" | grep -n "^\.\.\.\.") || true
              if [ -z "$end_line_num" ]; then
                echo "Warning: Could not find closing '....' delimiter for diagram at line $line_num in $file"
                continue
              fi
              end_line_num=$((delimiter_line + 1 + $(echo "$end_line_num" | cut -d: -f1) - 1))

              echo "Found Mermaid block from line $line_num to $end_line_num"

              diagram_content=$(sed -n "$((delimiter_line + 1)),$((end_line_num - 1))p" "$file")

              diagram_basename="mermaid_$(basename "$file" .adoc)_$line_num"

              echo "$diagram_content" > "${diagram_basename}.mmd"

              docker run --rm -v $(pwd):/data minlag/mermaid-cli:latest -i /data/${diagram_basename}.mmd -o /data/Doc/images/mermaid/${diagram_basename}.png -t dark -b transparent

              if [ -f "Doc/images/mermaid/${diagram_basename}.png" ]; then
                echo "Successfully created PNG at Doc/images/mermaid/${diagram_basename}.png"

                sed -i "${line_num}s|\[mermaid\]|image::images/mermaid/${diagram_basename}.png\[\]|" "$file"

                for (( i=delimiter_line; i<=end_line_num; i++ )); do
                  sed -i "${delimiter_line}d" "$file"
                done

                echo "Updated file with image reference"
              else
                echo "ERROR: PNG file was not created"
              fi

              rm -f "${diagram_basename}.mmd"
            done
          done

          echo "Generated images:"
          find Doc/images/mermaid -type f -name "*.png" || echo "No images found"

      - name: asciidoctor-ghpages
        uses: manoelcampos/asciidoctor-ghpages-action@v2.3.0
        with:
          pdf_build: true
          source_dir: Doc/
