name: GitHub Pages Publish

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4.2.2

      - name: Set GitHub Token
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          echo "GH_TOKEN=${{ github.token }}" >> $GITHUB_ENV

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Mermaid CLI and dependencies
        run: |
          npm install -g @mermaid-js/mermaid-cli
          sudo apt-get update
          sudo apt-get install -y libx11-xcb1 libxcomposite1 libxcursor1 libxdamage1 libxi6 libxtst6 libnss3 libcups2 libxss1 libxrandr2 libasound2 libatk1.0-0 libatk-bridge2.0-0 libpangocairo-1.0-0 libgtk-3-0 libgbm1

      - name: Find and convert Mermaid diagrams
        run: |
          # Create a directory for the generated images if it doesn't exist
          mkdir -p Doc/images/mermaid

          # Find all .adoc files in the Doc directory
          find Doc -name "*.adoc" -type f | while read file; do
            echo "Processing $file"

            # Extract Mermaid diagrams from the file and convert them to PNG
            grep -n "\[mermaid\]" "$file" | while read -r mermaid_line; do
              line_num=$(echo "$mermaid_line" | cut -d: -f1)

              # Get the ending line number
              end_line_num=$(tail -n +$line_num "$file" | grep -n "\[/mermaid\]" | head -1 | cut -d: -f1)
              if [ -z "$end_line_num" ]; then
                echo "Warning: Could not find closing [/mermaid] tag for diagram at line $line_num in $file"
                continue
              fi
              end_line_num=$((line_num + end_line_num - 1))

              # Extract the diagram content
              diagram_content=$(sed -n "$((line_num+1)),$((end_line_num-1))p" "$file")

              # Generate a unique filename based on file and line number
              diagram_filename="mermaid_$(basename "$file" .adoc)_$line_num.png"

              # Write the diagram to a temporary file
              echo "$diagram_content" > temp_diagram.mmd

              echo "Converting diagram at line $line_num to $diagram_filename"

              # Convert to PNG using mmdc with the --no-sandbox option
              mmdc -i temp_diagram.mmd -o "Doc/images/mermaid/$diagram_filename" -t dark --puppeteerConfig '{"args": ["--no-sandbox", "--disable-setuid-sandbox"]}'

              if [ $? -eq 0 ]; then
                echo "Successfully converted diagram to PNG"

                # Replace the Mermaid block with an image include in the file
                sed -i "${line_num}s/\[mermaid\]/image::images\/mermaid\/$diagram_filename\[\]/" "$file"
                sed -i "${end_line_num}d" "$file"
                for (( i=line_num+1; i<end_line_num; i++ )); do
                  sed -i "$((line_num+1))d" "$file"
                done
              else
                echo "Failed to convert diagram to PNG"
              fi
            done
          done

          # Clean up
          rm -f temp_diagram.mmd

      - name: asciidoctor-ghpages
        uses: manoelcampos/asciidoctor-ghpages-action@v2.3.0
        with:
          pdf_build: true
          source_dir: Doc/
